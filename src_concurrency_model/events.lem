(*===============================================================================*)
(*                                                                               *)
(*                rmem executable model                                          *)
(*                =====================                                          *)
(*                                                                               *)
(*  This file is:                                                                *)
(*                                                                               *)
(*  Copyright Shaked Flur, University of Cambridge 2017                          *)
(*                                                                               *)
(*  All rights reserved.                                                         *)
(*                                                                               *)
(*  It is part of the rmem tool, distributed under the 2-clause BSD licence in   *)
(*  LICENCE.txt.                                                                 *)
(*                                                                               *)
(*===============================================================================*)

(* emacs fontification -*-caml-*- *)

open import Pervasives
open import Assert_extra

open import Sail_impl_base
open import Utils
open import FreshIds



type thread_id = nat
type ioid = fresh_id thread_id (* instruction IDs are unique within threads *)
type eiid = fresh_id ioid      (* event IDs are unique within instructions *)



(** events: write, read_request, read_response, barrier *)

(* In the original ppcmem, execution instance ids, w_eiid, r_eiid, and
b_eiid, were treated abstractly in the model (compared with equality
but their fields not accessed) but constructed deterministically
rather than being gensym'd.  That may be good for search-space
exploration, as it lets us identify trivially isomorphic states more
easily, but it adds complexity that we eschew for now *)

type w_eiid  = eiid
type r_eiid  = eiid
type b_eiid  = eiid
type ts_eiid = eiid

type write = (* w *)
  <| weiid:        w_eiid;
     w_ioid:       ioid;
     w_thread:     thread_id;
     w_addr:       footprint;
     w_value:      maybe memory_value;
     w_write_kind: write_kind;
  |>

type write_conditional_request = <| wc_w:write; wc_wprev:maybe write|> (* wcr *)

(* uses unsafe struct equality *)
type barrier = (* b *)
  <| beiid:          b_eiid;
     b_ioid:         ioid;
     b_thread:       thread_id;
     b_barrier_kind: barrier_kind;
  |>

type barrier_ack = <| br_thread:thread_id; br_ioid:ioid; br_eiid: b_eiid |> (* br *)

type read_request = (* r *)
  <| reiid:               r_eiid ;
     r_ioid:              ioid;
     r_thread:            thread_id;
     r_addr:              footprint;
     r_read_kind:         read_kind;
     (* r_write_lower_bound: set write;
      * r_write_upper_bound: set write; *)
  |>

type read_response = (* rr *)
  <|  rr_eiid:   r_eiid;
      rr_ioid:   ioid;
      rr_thread: thread_id;
      rr_write:  write;
  |>

type transaction_start =
  <|  ts_eiid:   ts_eiid;
      ts_ioid:   ioid;
      ts_thread: thread_id;
  |>

(* write, barrier, and read kind predicates *)

let is_write_exclusive write =
  match write.w_write_kind with
  | Write_exclusive -> true
  | Write_exclusive_release -> true
  | _ -> false
  end

let is_write_release write =
  match write.w_write_kind with
  | Write_release -> true
  | Write_exclusive_release -> true
  | _ -> false
  end

let is_barrier_ld barrier =
  match barrier.b_barrier_kind with
  | Barrier_DMB (_, A64_barrier_LD) -> true
  | Barrier_DSB (_, A64_barrier_LD) -> true
  | _ -> false
  end

let is_barrier_st barrier =
  match barrier.b_barrier_kind with
  | Barrier_DMB (_, A64_barrier_ST) -> true
  | Barrier_DSB (_, A64_barrier_ST) -> true
  | _ -> false
  end

let is_read_exclusive read =
  match read.r_read_kind with
  | Read_exclusive -> true
  | Read_exclusive_acquire -> true
  | _ -> false
  end

let is_read_acquire read =
  match read.r_read_kind with
  | Read_acquire -> true
  | Read_exclusive_acquire -> true
  | _ -> false
  end


(* type class instantiations for event types *)
(* VALUETODO fix these up as the defaults are not good enough *)

let ~{ocaml} writeCompare w1 w2 =
  compare ((w1.w_thread, w1.w_ioid, w1.weiid), (w1.w_addr, w1.w_value, w1.w_write_kind))
          ((w2.w_thread, w2.w_ioid, w2.weiid), (w2.w_addr, w2.w_value, w2.w_write_kind))
let inline {ocaml} writeCompare = defaultCompare

let ~{ocaml} writeLess b1 b2      = writeCompare b1 b2 =  LT
let ~{ocaml} writeLessEq b1 b2    = writeCompare b1 b2 <> GT
let ~{ocaml} writeGreater b1 b2   = writeCompare b1 b2 =  GT
let ~{ocaml} writeGreaterEq b1 b2 = writeCompare b1 b2 <> LT

let inline {ocaml} writeLess      = defaultLess
let inline {ocaml} writeLessEq    = defaultLessEq
let inline {ocaml} writeGreater   = defaultGreater
let inline {ocaml} writeGreaterEq = defaultGreaterEq

instance (Ord write)
  let compare = writeCompare
  let (<)  = writeLess
  let (<=) = writeLessEq
  let (>)  = writeGreater
  let (>=) = writeGreaterEq
end

let {coq; ocaml} writeEqual w1 w2 = compare w1 w2 = EQ
let inline {hol; isabelle} writeEqual = unsafe_structural_equality

let {coq; ocaml} writeInequal w1 w2 = not (writeEqual w1 w2)
let inline {hol; isabelle} writeInequal = unsafe_structural_inequality

instance (Eq write)
  let (=)  = writeEqual
  let (<>) = writeInequal
end

instance (SetType write)
  let setElemCompare = compare
end

let ~{ocaml} barrierCompare b1 b2 =
  compare (b1.b_thread, b1.b_ioid, b1.beiid, b1.b_barrier_kind)
          (b2.b_thread, b2.b_ioid, b2.beiid, b2.b_barrier_kind)
let inline {ocaml} barrierCompare = defaultCompare

let ~{ocaml} barrierLess b1 b2      = barrierCompare b1 b2 =  LT
let ~{ocaml} barrierLessEq b1 b2    = barrierCompare b1 b2 <> GT
let ~{ocaml} barrierGreater b1 b2   = barrierCompare b1 b2 =  GT
let ~{ocaml} barrierGreaterEq b1 b2 = barrierCompare b1 b2 <> LT

let inline {ocaml} barrierLess      = defaultLess
let inline {ocaml} barrierLessEq    = defaultLessEq
let inline {ocaml} barrierGreater   = defaultGreater
let inline {ocaml} barrierGreaterEq = defaultGreaterEq

instance (Ord barrier)
  let compare = barrierCompare
  let (<)  = barrierLess
  let (<=) = barrierLessEq
  let (>)  = barrierGreater
  let (>=) = barrierGreaterEq
end

let {coq} barrierEqual w1 w2 = compare w1 w2 = EQ
let inline ~{coq} barrierEqual = unsafe_structural_equality

let {coq} barrierInequal w1 w2 = not (barrierEqual w1 w2)
let inline ~{coq} barrierInequal = unsafe_structural_inequality

instance (Eq barrier)
  let (=)  = barrierEqual
  let (<>) = barrierInequal
end

instance (SetType barrier)
  let setElemCompare = compare
end

(* read requests are uniquely identified by their thread_id, ioid, and reiid *)
let read_requestCompare rr1 rr2 =
  compare (rr1.reiid, rr1.r_thread, rr1.r_ioid) (rr2.reiid, rr2.r_thread, rr2.r_ioid)

instance (Ord read_request)
  let compare = read_requestCompare
  let (<)  rr1 rr2 = read_requestCompare rr1 rr2 =  LT
  let (<=) rr1 rr2 = read_requestCompare rr1 rr2 <> GT
  let (>)  rr1 rr2 = read_requestCompare rr1 rr2 =  GT
  let (>=) rr1 rr2 = read_requestCompare rr1 rr2 <> LT
end

let {ocaml;coq} read_requestEqual rr1 rr2 = compare rr1 rr2 = EQ
(* for Isabelle and HOL set equality is fine *)
let inline {hol;isabelle} read_requestEqual = unsafe_structural_equality

let {ocaml;coq} read_requestInequal rr1 rr2 = not (read_requestEqual rr1 rr2)
(* for Isabelle and HOL set equality is fine *)
let inline {hol;isabelle} read_requestInequal = unsafe_structural_inequality

instance (Eq read_request)
  let (=)  = read_requestEqual
  let (<>) = read_requestInequal
end

instance (SetType read_request)
  let setElemCompare = compare
end

let stringFromReadRequest r =
  "R "  (* TODO: move functions like src/pp.ml pp_brief_write_kind to lem *)
  ^ stringFromFootprint r.r_addr

instance (Show read_request)
  let show = stringFromReadRequest
end

let ~{ocaml} read_responseCompare rr1 rr2 =
  compare (rr1.rr_thread, rr1.rr_ioid, rr1.rr_eiid, rr1.rr_write)
          (rr2.rr_thread, rr2.rr_ioid, rr2.rr_eiid, rr2.rr_write)
let inline {ocaml} read_responseCompare = defaultCompare

let ~{ocaml} read_responseLess b1 b2      = read_responseCompare b1 b2 =  LT
let ~{ocaml} read_responseLessEq b1 b2    = read_responseCompare b1 b2 <> GT
let ~{ocaml} read_responseGreater b1 b2   = read_responseCompare b1 b2 =  GT
let ~{ocaml} read_responseGreaterEq b1 b2 = read_responseCompare b1 b2 <> LT

let inline {ocaml} read_responseLess      = defaultLess
let inline {ocaml} read_responseLessEq    = defaultLessEq
let inline {ocaml} read_responseGreater   = defaultGreater
let inline {ocaml} read_responseGreaterEq = defaultGreaterEq

instance (Ord read_response)
  let compare = read_responseCompare
  let (<)  = read_responseLess
  let (<=) = read_responseLessEq
  let (>)  = read_responseGreater
  let (>=) = read_responseGreaterEq
end

instance (SetType read_response)
  let setElemCompare = compare
end


let ~{ocaml} transaction_startCompare rr1 rr2 =
  compare (rr1.ts_thread, rr1.ts_ioid, rr1.ts_eiid)
          (rr2.ts_thread, rr2.ts_ioid, rr2.ts_eiid)
let inline {ocaml} transaction_startCompare = defaultCompare

let ~{ocaml} transaction_startLess b1 b2      = transaction_startCompare b1 b2 =  LT
let ~{ocaml} transaction_startLessEq b1 b2    = transaction_startCompare b1 b2 <> GT
let ~{ocaml} transaction_startGreater b1 b2   = transaction_startCompare b1 b2 =  GT
let ~{ocaml} transaction_startGreaterEq b1 b2 = transaction_startCompare b1 b2 <> LT

let inline {ocaml} transaction_startLess      = defaultLess
let inline {ocaml} transaction_startLessEq    = defaultLessEq
let inline {ocaml} transaction_startGreater   = defaultGreater
let inline {ocaml} transaction_startGreaterEq = defaultGreaterEq

instance (Ord transaction_start)
  let compare = transaction_startCompare
  let (<)  = transaction_startLess
  let (<=) = transaction_startLessEq
  let (>)  = transaction_startGreater
  let (>=) = transaction_startGreaterEq
end

instance (SetType transaction_start)
  let setElemCompare = compare
end


(* TODO: are the above equalities on the sets of writes going to be correct? *)

let stringFromWrite w =
  "W "  (* TODO: move functions like src/pp.ml pp_brief_write_kind to lem*)
  ^ stringFromFootprint w.w_addr
  ^ "="
  ^ show w.w_value

instance (Show write)
  let show = stringFromWrite
end

let stringFromBarrier b =
  show b.b_barrier_kind ^ "(" ^ show b.b_thread ^ ")"

instance (Show barrier)
  let show = stringFromBarrier
end


instance (Eq transaction_start)
  let (=)  t1 t2 = compare t1 t2 = EQ
  let (<>) t1 t2 = not (compare t1 t2 = EQ)
end

instance (Show transaction_start)
  let show t = "TSTART"
end




(** Making Memory Model Events **************************************)

(* for initial-state writes we allow them to be any power of 2 sized-and-aligned *)

let aligned (a: integer) (n: nat) = (a mod (integerFromNat n)) = 0

let max_exp : nat = 29
let max_size : nat = 2 ** max_exp

let rec biggest_initial_aligned_two_to_the_n_region' (a:integer) (sz:nat) (exp:nat) =
  if sz = 0 then
    failwith "sz = 0 illegal for biggest_initial_aligned_two_to_the_n_region'"
  else
    let size = 2 ** exp in
    if sz >= size && aligned a size then
      size
    else
      biggest_initial_aligned_two_to_the_n_region' a sz (exp-1)

let rec repartition ((a:integer),(sz:nat)) : list (integer*nat) =
  if sz=0 then
    []
  else
    if sz > max_size then failwith "repartition given too big a footprint" else
    let size = biggest_initial_aligned_two_to_the_n_region' a sz max_exp in
    let a' = a + (integerFromNat size) in
    let fp = (a,size) in
    let fps = repartition (a',sz-size) in
      fp::fps




let make_read_request_event
    (ist:       id_state ioid)
    (tid:       thread_id)
    (ioid:      ioid)
    (addr:      address)
    (size:      nat)
    (read_kind: read_kind)
    : read_request * (id_state ioid)
  =
  let () = ensure (size <> 0) "size = 0 illegal for make_read_request_event" in
  let (new_eiid, ist') = gen_fresh_id ist in
  let rr =
    <|  r_thread = tid;
        r_ioid = ioid;
        reiid = new_eiid;
        r_addr = (addr, size);
        r_read_kind = read_kind;
        (* r_write_lower_bound = {};
         * r_write_upper_bound = {}; *)
    |>
  in
  (rr, ist')

(* don't call this function directly, use isa_info.make_read_request_events instead *)
(* For mixed-size, we split nonaligned/mixed-size read requests into multiple
   events as necessary. Create (size / read_size) read request events with;
   head will be from 'addr'. The direction of eiids and addresses match. E.g.,
   a two-byte read from 0x1001, will result in eiid 0 for the read from 0x1001,
   and eiid 1 for the read from 0x1002. It might be less pleasing for
   big-endian. *)
let make_read_request_events'
    (ist:       id_state ioid)
    (tid:       thread_id)
    (ioid:      ioid)
    (addr:      address)
    (size:      nat)
    (read_size: nat)
    (read_kind: read_kind)
    : (list read_request) * (id_state ioid)
  =
  let () = ensure (size mod read_size = 0)
    ("the load footprint size (" ^ show size ^ ") is not devisable by the read size (" ^ show read_size ^ ")")
  in

  List.genlist
    (fun n -> add_address_nat addr (n * read_size))
    (size / read_size)
  $> List.foldl
      (fun (rrs, ist) addr ->
        let (rr, ist) = make_read_request_event ist tid ioid addr read_size read_kind in
        (rr :: rrs, ist))
      ([], ist)
  $> (fun (rs, ist) -> (List.reverse rs, ist))

let make_empty_write_event
    (ist:  id_state ioid)
    (tid:  thread_id)
    (ioid: ioid)
    (addr: address)
    (sz:   nat)
    (wk:   write_kind)
    : write * (id_state ioid)
  =
  let () = ensure (sz <> 0) "sz = 0 illegal for make_empty_write_event" in
  let (new_eiid, ist') = gen_fresh_id ist in
  let w =
    <|  w_thread = tid;
        w_ioid = ioid;
        weiid = new_eiid;
        w_addr = (addr,sz);
        w_value = Nothing;
        w_write_kind = wk;
    |>
  in
  (w, ist')

(* don't call this function directly, use isa_info.make_empty_write_events instead *)
(* For mixed-size, we split nonaligned/mixed-size writes into multiple events
   as necessary. Create (size / write_size) write events with no value; head
   will be to 'addr'. The direction of eiids and addresses match. E.g., a
   two-byte write to 0x1001, will result in eiid 0 for the write to 0x1001,
   and eiid 1 for the write to 0x1002. It might be less pleasing for
   big-endian. *)
let make_empty_write_events'
    (ist:  id_state ioid)
    (tid:  thread_id)
    (ioid: ioid)
    (addr: address)
    (size: nat)
    (write_size:   nat)
    (wk:   write_kind)
    : (list write) * (id_state ioid)
  =
  let () = ensure (size mod write_size = 0)
    ("the store footprint size (" ^ show size ^ ") is not devisable by the write size (" ^ show write_size ^ ")")
  in

  List.genlist
    (fun n -> add_address_nat addr (n * write_size))
    (size / write_size)
  $> List.foldl
      (fun (ws, ist) addr ->
        let (w, ist) = make_empty_write_event ist tid ioid addr write_size wk in
        (w :: ws, ist))
      ([], ist)
  $> (fun (ws, ist) -> (List.reverse ws, ist))

(* split 'bytes' between 'writes' (starting from the head of both) *)
let rec set_write_values
    (bytes:   memory_value)
    (writes:  list write)
    (writes': list write)
    : list write
  =
  match writes with
  | write :: writes ->
      let (_, size) = write.w_addr in
      let () = ensure (List.length bytes >= size) "not enough bytes" in
      let (value, bytes) = List.splitAt size bytes in
      set_write_values bytes writes (<| write with w_value = Just value |> :: writes')
  | [] ->
      let () = ensure (bytes = []) "unused bytes" in
      List.reverse writes'
  end


let rec make_write_events_big_split
    (ist:        id_state ioid)
    (tid:        thread_id)
    (ioid:       ioid)
    ((addr, sz): footprint)
    (bs:         memory_value)
    (wk:         write_kind) (*isrelease*)
    : (list write) * (id_state ioid) =
  if sz=0 && bs = [] then
    ([],ist)
  else if sz = 0 then
    failwith "sz = 0 illegal for make_write_events_big_split"
  else
    if sz > max_size then failwith "make_write_events_big_split given too big a write" else
    let size = biggest_initial_aligned_two_to_the_n_region' (integer_of_address addr) sz max_exp in
    if List.length bs < size then failwith "make_write_events_big_split not given enough bytes" else
    let (bs1, bs2) = List.splitAt size bs in
    let addr' = add_address_nat addr size in
    let (new_eiid,ist') = gen_fresh_id ist in
    let fp : footprint = (addr,size) in
    let w = <|w_thread = tid; w_ioid = ioid; weiid = new_eiid; w_addr = fp; w_value = Just bs1; w_write_kind=wk; |> in
    let (ws,ist'') = make_write_events_big_split ist' tid ioid (addr',sz-size) bs2 wk in
    (w::ws,ist'')


let make_barrier_event
    (ist:  id_state ioid)
    (tid:  thread_id)
    (ioid: ioid)
    (bk:   barrier_kind)
    : barrier * (id_state ioid)
  =
  let (new_eiid, ist') = gen_fresh_id ist in
  let barrier_event =
    <|  b_thread = tid;
        b_ioid = ioid;
        beiid = new_eiid;
        b_barrier_kind = bk;
    |>
  in
  (barrier_event, ist')


let make_transaction_start_event
    (ist:  id_state ioid)
    (tid:  thread_id)
    (ioid: ioid)
    : transaction_start * (FreshIds.id_state ioid)
  =
  let (new_eiid, ist') = gen_fresh_id ist in
  let event =
    <|  ts_eiid   = new_eiid;
        ts_ioid   = ioid;
        ts_thread = tid;
    |>
  in
  (event, ist')


